"This is a very well-written and nicely structured paper that tackles the problem of generating/inferring code given an incomplete description (sketch) of the task to be achieved.[[INT-POS,PDI-POS,OAL-POS], [CLA-POS,PNF-POS], [APC], [MAJ]] This is a novel contribution to existing machine learning approaches to automated programming that is achieved by training on a large corpus of Android apps.[[RWK-POS,DAT-POS,EXP-POS], [NOV-POS,EMP-POS], [APC], [MAJ]] The combination of the proposed technique and leveraging of real data are a substantial strength of the work compared to many approaches that have come previously.[[PDI-POS,DAT-POS,MET-POS], [IMP-POS], [APC], [MAJ]]\n\nThis paper has many strengths:\n1) The writing is clear, and the paper is well-motivated\n2)[[RWK-POS,PDI-POS], [CLA-POS,EMP-POS], [APC], [MAJ]] The proposed algorithm is described in excellent detail, which is essential to reproducibility\n3)[[PDI-POS,MET-POS], [SUB-POS,EMP-POS], [APC], [MAJ]] As stated previously, the approach is validated with a large number of real Android projects\n4)[[PDI-NEU,ANA-NEU], [CMP-NEU], [SMY], [GEN]] The fact that the language generated is non-trivial (Java-like) is a substantial plus\n5) Good discussion of limitations\n\n[[RWK-POS,PDI-POS], [SUB-POS], [APC], [MAJ]]Overall, this paper is a valuable addition to the empirical software engineering community, and a nice break from more traditional approaches of learning abstract syntax trees."[[RWK-POS,EXP-POS,MET-POS,OAL-POS], [NOV-POS,EMP-POS], [APC], [MAJ]]
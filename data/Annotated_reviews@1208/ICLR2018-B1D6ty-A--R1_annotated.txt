"After reading the rebuttal:\n\nThe authors addressed some of my theoretical questions.[[EXT-NEU], [null], [DIS], [GEN]] I think the paper is borderline, leaning towards accept.[[OAL-POS], [REC-POS], [APC], [MAJ]]\n\nI do want to note my other concerns:\n\nI suspect the theoretical results obtained here are somewhat restricted to the least-squares, autoencoder loss.[[RES-NEG], [EMP-NEG], [CRT], [MIN]]  \n\nAnd note that the authors show that the proposed algorithm performs comparably to SGD, but not significantly better.[[MET-NEG], [EMP-NEG], [CRT], [MAJ]] The classification result (Table 1) was obtained on the autoencoder features instead of training a classifier on the original inputs.[[RES-NEU,TNF-NEU], [EMP-NEU], [DIS], [MIN]] So it is not clear if the proposed algorithm is better for training the classifier, which may be of more interest.[[MET-NEG], [EMP-NEG], [CRT], [MIN]]\n\n=============================================================\n\nThis paper presents an algorithm for training deep neural networks.[[OAL-NEU], [EMP-NEU], [DIS], [GEN]] Instead of computing gradient of all layers and perform updates of all weight parameters at the same time, the authors propose to perform alternating optimization on weights of individual layers.[[MET-NEU], [EMP-NEU], [DIS], [MIN]] \n\nThe theoretical justification is obtained for single-hidden-layer auto-encoders.[[MET-NEU], [EMP-NEU], [DIS], [MIN]] Motivated by recent work by Hazan et al 2015, the authors developed the local-quasi-convexity of the objective w.r.t. the hidden layer weights for the generalized RELU activation.[[RWK-NEU,MET-NEU], [null], [DIS], [GEN]] As a result, the optimization problem over the single hidden layer can be optimized efficiently using the algorithm of Hazan et al 2015.[[RWK-NEU], [CMP-NEU], [SUG], [MIN]] This itself can be a small, nice contribution.[[OAL-POS], [EMP-POS], [APC], [MIN]]\n\nWhat concerns me is the extension to multiple layers.[[MET-NEG], [EMP-NEG], [CRT], [MIN]] Some questions are not clear from section 3.4:\n1.[[CNT], [CNT], [CRT], [MIN]] Do we still have local-quasi-convexity for the weights of each layer, when there are multiple nonlinear layers above it?[[MET-NEU], [EMP-NEU], [QSN], [MIN]] A negative answer to this question will somewhat undermine the significance of the single-hidden-layer result.[[RES-NEG], [IMP-NEG], [DIS], [MIN]]\n\n2. Practically, even if the authors can perform efficient optimization of weights in individual layers, when there are many layers, the alternating optimization nature of the algorithm can possibly result in overall slower convergence.[[MET-NEG], [CMP-NEG,EMP-NEG], [CRT], [MIN]] Also, since the proposed algorithm still uses gradient based optimizers for each layer, computing the gradient w.r.t. lower layers (closer to the inputs) are still done by backdrop, which has pretty much the same computational cost of the regular backdrop algorithm for updating all layers at the same time.[[MET-NEU], [EMP-NEU], [DIS], [GEN]] As a result, I am not sure if the proposed algorithm is on par with / faster than the regular SGD algorithm in actual runtime.[[RWK-NEG,MET-NEG], [CMP-NEG], [CRT], [MAJ]] In the experiments, the authors plotted the training progress w.r.t. the minibatch iterations, I do not know if the minibatch iteration is a proxy for actual runtime (or number of floating point operations).[[EXP-NEG], [EMP-NEG], [CRT], [MAJ]]\n\n3. In the experiments, the authors found the network optimized by the proposed algorithm generalize better than regular SGD.[[EXP-NEU,MET-NEU], [CMP-NEU,EMP-NEU], [DIS], [GEN]] Is this result consistent (across dataset, random initializations, etc), and can the authors elaborate the intuition behind?\n"[[DAT-NEU,RES-NEU,MET-NEU], [EMP-NEU], [DIS], [MIN]]
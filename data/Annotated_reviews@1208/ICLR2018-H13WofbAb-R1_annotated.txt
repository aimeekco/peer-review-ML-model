"This paper introduces a parameter server architecture to improve distributed training of CNNs in the presence of stragglers.[[INT-NEU,EXP-POS,MET-POS], [EMP-POS], [APC], [MAJ]] Specifically, the paper proposes partial pulling where a worker only waits for first b blocks rather than all the blocks of the parameters.[[PDI-NEU,DAT-NEU,ANA-NEU], [null], [SMY], [GEN]] This technique is combined with existing methods such as partial pushing (Pan et. al. 2017) for a partial synchronous SGD method.[[RWK-NEU,MET-NEU,BIB-NEU], [EMP-NEU], [SMY], [GEN]] The method is evaluated with Resnet -50 using synthetic delays.[[MET-NEU,ANA-NEU], [EMP-NEU], [DIS], [GEN]]\n\nComments for the author:\n\nThe paper is well-written and easy to follow.[[INT-POS], [CLA-POS,REC-POS], [APC,FBK], [MAJ]] The problem of synchronization costs being addressed is important but it is unclear how much of this is arising due to large blocks.\[[PDI-NEG], [CLA-NEG], [DFT], [MIN]]n\n1) The partial pushing method (Pan et. al. 2017, section 3.1) shows a clear evidence for the problem using a real workload with a large number of workers.[[PDI-POS,BIB-POS], [null], [DIS], [GEN]] Unfortunately, in your Figure 2, this is not as obvious and not real since it is using simulated delays.[[PDI-NEG,EXP-NEG,TNF-NEG], [EMP-NEG], [DFT], [MIN]] More specifically, it is not clear how the workers behave in a real environment and whether you get a clear benefit from using a partial number of blocks as opposed to sending all of them. \n\n2) Did you modify your code to support block-wise sending of gradients (some description of how the framework was modified will be helpful)? [[PDI-NEU], [null], [QSN], [GEN]]The idea is to send partial parameter blocks and when 'b' blocks are received, compute the gradients.[[PDI-NEU,DAT-NEU,EXP-NEU,MET-NEU,ANA-NEU], [CMP-NEU,EMP-NEU], [DIS], [GEN]] I feel that, with such a design, you may actually end up hurting the performance by sending a large number of small packets in the no failure case.[[RWK-NEG,DAT-NEG,EXP-NEG,RES-NEG], [IMP-NEG,EMP-NEG], [DFT], [MIN]] For real, large data centers, this may cause a packet storm and subsequent throughput collapse (e.g. the incast problem).[[RWK-NEU,DAT-NEU,EXP-NEG], [IMP-NEG,EMP-NEG], [DFT], [MIN]] You need to show the evidence that you do not hurt the failure-free case for a large number of workers.[[PDI-NEG,DAT-NEG,ANA-NEG], [REC-NEG,EMP-NEG], [DIS,FBK], [MIN]]\n\n3) The evaluation is on fairly small workloads (CIFAR-10).[[PDI-POS,ANA-POS], [IMP-POS], [APC], [MAJ]] Again, evaluating over Imagenet and demonstrating a clear speedup over existing sync methods will be helpful.[[RWK-POS], [IMP-POS], [APC], [MAJ]] Furthermore, a clear description of your \u201cpull\u201d configuration (such as in Figure 1) i.e.[[BIB-POS], [null], [FBK], [GEN]] how many actual bytes or blocks are sent and what is the threshold will be helpful (beyond a vague 90%).[[DAT-NEU,EXP-NEU,MET-NEU], [null], [QSN], [GEN]]\n\n4) Another concern with partial synchronization methods that I have is that how do you pick these configurations (pull 0.75 etc).[[PDI-NEU,MET-NEU], [null], [QSN], [GEN]] These appear to be dataset specific and finding the optimal configuration here requires significant experimentation that takes significantly more time than just running the baseline.[[RWK-NEU,DAT-NEG,EXP-NEG,MET-NEG], [IMP-NEG,EMP-NEG], [SUG,DFT,FBK], [MIN]]\n\nOverall, I feel there is not enough evidence for the problem specifically generating large blocks of gradients and this needs to be clearly shown.[[PDI-NEG,MET-NEG,ANA-NEG,OAL-NEG], [CLA-NEG,EMP-NEG], [DFT], [MIN]] To propose a solution for stragglers, evaluation should be done in a datacenter environment with the presence of stragglers (and not small workloads with synthetic delays)[[PDI-NEU,DAT-NEU,ANA-NEU], [EMP-NEU], [DIS], [GEN]]. Furthermore, the proposed technique despite the simplicity appears as a rather incremental contribution."[[RWK-POS,PDI-POS,MET-POS], [SUB-POS,EMP-POS], [APC], [MAJ]]